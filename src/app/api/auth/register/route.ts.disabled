import { NextResponse } from "next/server"
import bcrypt from "bcryptjs"
import { prisma } from "@/lib/prisma"
import { z } from "zod"

// 验证注册数据的schema
const registerSchema = z.object({
  email: z.string().email("请输入有效的邮箱地址"),
  password: z.string().min(6, "密码至少需要6个字符"),
  name: z.string().min(1, "请输入姓名").optional()
})

export async function POST(request: Request) {
  try {
    const body = await request.json()

    // 验证输入数据
    const validation = registerSchema.safeParse(body)
    if (!validation.success) {
      return NextResponse.json(
        {
          error: "输入数据无效",
          details: validation.error.issues.map(e => e.message).join(", ")
        },
        { status: 400 }
      )
    }

    const { email, password, name } = validation.data

    // 检查用户是否已存在
    const existingUser = await prisma.user.findUnique({
      where: { email }
    })

    if (existingUser) {
      return NextResponse.json(
        { error: "该邮箱已被注册" },
        { status: 400 }
      )
    }

    // 加密密码
    const hashedPassword = await bcrypt.hash(password, 12)

    // 创建用户和相关数据
    const result = await prisma.$transaction(async (tx) => {
      // 创建用户
      const user = await tx.user.create({
        data: {
          email,
          passwordHash: hashedPassword,
          name: name || email.split("@")[0], // 如果没有提供姓名，使用邮箱前缀
          provider: "email",
          role: "USER"
        }
      })

      // 创建用户积分记录
      await tx.userPoints.create({
        data: {
          userId: user.id,
          points: 25 // 新用户赠送25积分
        }
      })

      // 创建会员记录
      await tx.membership.create({
        data: {
          userId: user.id,
          membershipType: "FREE",
          isActive: true
        }
      })

      return user
    })

    // 返回成功响应（不包含敏感信息）
    return NextResponse.json(
      {
        message: "注册成功！",
        user: {
          id: result.id,
          email: result.email,
          name: result.name,
          role: result.role,
          createdAt: result.createdAt
        }
      },
      { status: 201 }
    )

  } catch (error) {
    console.error("注册错误:", error)

    // 处理特定错误
    if (error instanceof Error) {
      if (error.message.includes("Unique constraint")) {
        return NextResponse.json(
          { error: "该邮箱已被注册" },
          { status: 400 }
        )
      }

      if (error.message.includes("Can't reach database")) {
        return NextResponse.json(
          { error: "数据库连接失败，请稍后重试" },
          { status: 503 }
        )
      }
    }

    return NextResponse.json(
      { error: "注册失败，请稍后重试" },
      { status: 500 }
    )
  }
}