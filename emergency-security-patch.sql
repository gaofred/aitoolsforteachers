-- Á¥ßÊÄ•ÂÆâÂÖ®Ë°•‰∏ÅÔºöÁ´ãÂç≥ÂÅúÊ≠¢ÊØèÊó•Â•ñÂä±ÊºèÊ¥û
-- Âú®Supabase SQLÁºñËæëÂô®‰∏≠Á´ãÂç≥ÊâßË°åÊ≠§ËÑöÊú¨

-- 1. Á´ãÂç≥Âà†Èô§ÊúâÈóÆÈ¢òÁöÑÂáΩÊï∞ÔºåÂÅúÊ≠¢ÂÆâÂÖ®ÊºèÊ¥û
DROP FUNCTION IF EXISTS public.add_daily_reward CASCADE;
DROP FUNCTION IF EXISTS public.add_daily_reward_simple CASCADE;

-- 2. ÂàõÂª∫‰∏¥Êó∂ÁöÑÂÆâÂÖ®ÂáΩÊï∞ÔºàÊãíÁªùÊâÄÊúâËØ∑Ê±ÇÔºâ
CREATE OR REPLACE FUNCTION public.add_daily_reward(
    user_uuid UUID,
    p_current_points INTEGER DEFAULT 0,
    p_reward_points INTEGER DEFAULT 25
)
RETURNS JSON AS $$
BEGIN
    RETURN json_build_object(
        'success', false,
        'message', 'ÊØèÊó•Â•ñÂä±ÂäüËÉΩÊ≠£Âú®Áª¥Êä§‰∏≠ÔºåËØ∑Á®çÂêéÂÜçËØï',
        'error', 'TEMPORARY_SECURITY_PATCH'
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ÊéàÊùÉ
GRANT EXECUTE ON FUNCTION public.add_daily_reward TO authenticated;
GRANT EXECUTE ON FUNCTION public.add_daily_reward TO anon;

-- 3. ÂàõÂª∫ÁÆÄÂçïÁöÑÈò≤ÈáçÂ§çÊ£ÄÊü•ÂáΩÊï∞
CREATE OR REPLACE FUNCTION public.check_daily_reward_status(
    p_user_id UUID
)
RETURNS JSON AS $$
DECLARE
    today_claimed BOOLEAN;
    current_date TEXT;
BEGIN
    current_date := TO_CHAR(NOW() AT TIME ZONE 'Asia/Shanghai', 'YYYY-MM-DD');

    -- Ê£ÄÊü•‰ªäÂ§©ÊòØÂê¶Â∑≤ÁªèÈ¢ÜÂèñËøá
    SELECT EXISTS (
        SELECT 1 FROM public.point_transactions
        WHERE user_id = p_user_id
        AND type = 'BONUS'
        AND description = 'ÊØèÊó•ÁôªÂΩïÂ•ñÂä± - ' || current_date
    ) INTO today_claimed;

    RETURN json_build_object(
        'hasClaimedToday', today_claimed,
        'message', CASE
            WHEN today_claimed THEN '‰ªäÂ§©Â∑≤ÁªèÈ¢ÜÂèñËøáÂ•ñÂä±‰∫Ü'
            ELSE 'ÂèØ‰ª•È¢ÜÂèñ‰ªäÊó•Â•ñÂä±'
        END
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ÊéàÊùÉ
GRANT EXECUTE ON FUNCTION public.check_daily_reward_status TO authenticated;
GRANT EXECUTE ON FUNCTION public.check_daily_reward_status TO anon;

-- 4. Êü•ÁúãÂΩìÂâçÁä∂ÊÄÅ
SELECT
    'Emergency Security Patch Applied' as status,
    'Daily reward function disabled' as action,
    NOW() as patch_time;

-- 5. ÊòæÁ§∫ÂΩìÂâçÁßØÂàÜÊúÄÈ´òÁöÑÁî®Êà∑ÔºàÂÆâÂÖ®ÁõëÊéßÔºâ
SELECT
    u.email,
    up.points,
    up.last_updated,
    CASE
        WHEN up.points > 100 THEN 'üö® SECURITY ALERT - High Points'
        WHEN up.points > 50 THEN '‚ö†Ô∏è Warning - Elevated Points'
        ELSE '‚úÖ Normal'
    END as security_status
FROM public.users u
JOIN public.user_points up ON u.id = up.user_id
ORDER BY up.points DESC
LIMIT 10;